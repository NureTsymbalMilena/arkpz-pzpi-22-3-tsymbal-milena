1
Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії
ЗВІТ
до практичного заняття №1 з дисципліни
«Аналіз та рефакторинг коду»
на тему: «Правила оформлення програмного коду»
Виконала
ст. гр. ПЗПІ-22-3
Цимбал Мілена Русланівна
Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович
Харків 2024
2
1 МЕТА РОБОТИ
Ознайомитись з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, навчити аналізувати та рефакторити код для покращення його якості.
2 ВСТУП
C# — це потужна, об'єктно-орієнтована, статично типізована мова програмування, яка вперше з’явилася в 2000 році як частина платформи .NET. Вона була розроблена в Microsoft для створення широкого спектру додатків, від настільних і веб-додатків до мобільних і хмарних рішень. Завдяки своїй продуктивності та гнучкості, C# активно використовується для розробки високопродуктивних, масштабованих додатків, що забезпечує інтеграцію з іншими технологіями платформи .NET. Завдяки своїм можливостям і великій спільноті розробників, C# є популярним вибором у різних галузях, включаючи фінанси, ігрову індустрію, бізнес-додатки і наукові дослідження.
Основні рекомендації для написання коду на C# включають: використання інструмента ReSharper для автоматичного форматування і забезпечення єдиного стилю коду; чітке і описове іменування класів, методів і властивостей; коментарі слід використовувати для пояснення незрозумілих або складних частин коду; використання функцій як основних будівельних блоків, переважання чистих функцій та функціональних конструкцій, таких як map, filter, fold; уникання змінного стану; використання асинхронних методів (async, await); використання try-catch блоків для огортання потенційно небезпечного коду та обробки виключень у блоках catch, логування помилок для відстежування помилок та діагностики проблем, використання блоків finally для звільнення ресурсів або виконання необхідних дій незалежно від того, чи виникла помилка.
3
Сьогодні C# активно застосовується в різних галузях: від розробки корпоративних бізнес-додатків та фінансових систем до створення ігор (Unity) і веб-розробки (ASP.NET). Завдяки своїй високій продуктивності, гнучкості та інтеграції з платформою .NET, C# надає розробникам широкий спектр можливостей для створення ефективних, масштабованих і надійних програмних рішень. Його потужні засоби та велика спільнота роблять C# популярним вибором серед розробників у різних сферах, забезпечуючи оптимальну продуктивність та надійність коду.
3 ХІД РОБОТИ
РЕКОМЕНДАЦІЇ ОФОРМЛЕННЯ КОДУ
Посилання на відео з демонстрацією рекомендацій оформлення коду на мові програмування C# наведено у додатку А.
1.
Використовуйте 4 пробіли
Використання відступів у коді допомагає зробити його більш читабельним та зрозумілим. У C# рекомендовано використовувати 4 пробіли для відступів замість табуляції. Це забезпечує уніфіковане відображення коду незалежно від середовища розробки або налаштувань редактора. Стандартні відступи також допомагають уникнути конфліктів у колективній роботі над кодом. Дотримання чіткої ієрархії відступів дозволяє легко визначити вкладеність блоків коду та їхню логічну структуру. Крім того, слід використовувати відступи між операторами та елементами коду для покращення його читабельності. Це допомагає візуально розділити логічні частини коду і полегшує його розуміння. Застосування таких підходів сприяє створенню більш організованого та зрозумілого коду.
4
2. Розміщуйте відкривні дужки на новому рядку, а закривні - на тому ж рівні відступів.
Дужки є важливими елементами синтаксису в C# і відіграють критичну роль у структурі та логіці коду.
Відкривні дужки повинні завжди розташовуватися на наступному рядку після ключового слова. Цей стиль допомагає чітко визначити початок блоку коду, що робить його більш зрозумілим та полегшує навігацію. Розміщення відкривної дужки на тому ж рівні відступів, що і ключове слово, забезпечує візуальну послідовність та допомагає швидко визначити належність коду до певного блоку.
Закривні дужки повинні розташовуватися на своєму рядку і на тому ж рівні відступів, що й відповідне ключове слово чи конструкція. Це дозволяє легко розпізнати завершення блоку коду і підтримує чітку структурну організацію.
3. Розбивайте складні вирази на декілька рядків
Дотримання оптимальної довжини рядків допомагає зберегти код читабельним та уникнути горизонтального прокручування, що може бути незручним. Рекомендована максимальна довжина рядка в C# становить 80–120 символів. Якщо рядок перевищує цю довжину, слід розбити його на кілька частин. Це не тільки робить код естетично приємним, але й полегшує процес навігації та редагування, особливо в великих файлах коду. Підтримка коротких рядків допомагає запобігти перенасиченню інформацією, дозволяючи розробникам швидше орієнтуватися в коді та розуміти його призначення. Це також важливо для командної роботи, оскільки інші розробники можуть легше читати та підтримувати код, якщо він структурований відповідно до загальноприйнятих стандартів.
5
4. Використовуйте форматувальник ReSharper
ReSharper — це розширення для середовища розробки Microsoft Visual Studio, розроблене компанією JetBrains. Воно допомагає програмістам писати код швидше, краще та з меншими зусиллями, надаючи інструменти для автоматизації та оптимізації процесу розробки. ReSharper пропонує широкий спектр функціональних можливостей, включаючи аналіз коду в реальному часі, автозаповнення, рефакторинг та інші корисні інструменти. Це значно полегшує виявлення та виправлення помилок, а також покращує структуру і читабельність коду. Крім того, ReSharper підтримує багатомовність, що дозволяє використовувати його з різними мовами програмування, такими як C#, VB.NET, ASP.NET, JavaScript і TypeScript. Завдяки цьому інструменту розробники можуть підвищити свою продуктивність та якість створюваного програмного забезпечення.
Приклад поганого та гарного коду щодо рекомендацій 1–4:
5 // Поганий приклад
6 void ProcessData(List<int> data){
7 if (data==null||data.Count==0){
8 Console.WriteLine("No data to process.");
9 return;
10 }
11
12 int result=0;
13
14 foreach (var item in data){
15 result+=item;}
16
17 if (result>1000){
18 Console.WriteLine("Result is too large: "+result+". Цей рядок спеціально доданий, щоб перевищити рекомендовану довжину рядка в 80-120 символів, і продемонструвати, як рядок може бути розбитий на
6
декілька частин, зберігаючи логічну структуру та покращуючи читабельність коду.");}
19 else{
20 Console.WriteLine("Processed result: "+result);}
21 }
22 // Гарний приклад
23 void ProcessDataMethod(List<int> data)
24 {
25 if (data == null || data.Count == 0)
26 {
27 Console.WriteLine("No data to process.");
28 return;
29 }
30
31 int result = 0;
32
33 foreach (var item in data)
34 {
35 result += item;
36 }
37
38 if (result > 1000)
39 {
40 Console.WriteLine("Result is too large: " + result + ". Цей рядок спеціально доданий, щоб перевищити " +
41 "рекомендовану довжину рядка в 80-120 символів, і продемонструвати, як рядок може бути розбитий на " +
42 "декілька частин, зберігаючи логічну структуру та покращуючи читабельність коду.");
43 }
44 else
45 {
46 Console.WriteLine("Processed result: " + result);
47 }
48 }
7
5. Використовуйте CamelCase для змінних і параметрів, а PascalCase — для класів, методів і властивостей.
Використовуйте CamelCase для змінних, параметрів та локальних змінних. Використовуйте PascalCase для найменування класів, методів, властивостей та інших публічних елементів. CamelCase допомагає легко відрізнити змінні та параметри від класів і методів. Це робить ваш код інтуїтивно зрозумілим і полегшує його читання. Використання цих стилів найменування також дотримується загальноприйнятих стандартів, що спрощує роботу в команді та полегшує обмін кодом між розробниками.
6. Обирайте чіткі та описові найменування змінних, функцій та модулів.
Імена повинні бути чіткими і описовими, вказуючи на їх функціональність та призначення. Це допоможе іншим розробникам зрозуміти ваш код без додаткових пояснень. Використовуйте повні слова замість абревіатур, якщо вони не загальноприйняті. Наприклад, замість num використовуйте number, щоб уникнути неоднозначності. Методи зазвичай починайте з дієслів, що описують дію, наприклад, GetUserData, CalculateSum. Це робить код більш інтуїтивним та зрозумілим. Події також повинні починатися з дієслів, що описують дію, наприклад, DataLoaded, ValueChanged. Це допомагає швидко зрозуміти, що саме робить метод або подія, і забезпечує легку підтримку та розширення коду в майбутньому.
Приклад поганого та гарного коду щодо рекомендацій 5–6:
51 //Поганий приклад
52 public class Emp
53 {
54 public string fn;
55
56 public string ln;
8
57
58 public void p()
59 {
60 Console.WriteLine(fn + " " + ln);
61 }
62
63 }
64
65 //Гарний приклад
66 public class Employee
67 {
68 public string firstName;
69
70 public string lastName;
71
72 public void PrintFullName()
73 {
74 Console.WriteLine(firstName + " " + lastName);
75 }
76 }
7. Використовуйте коментарі для покращення зрозумілості коду
Для забезпечення зрозумілості та легкості підтримки коду використовуйте коментарі для пояснення складних або незрозумілих частин коду. Вони повинні бути короткими, зрозумілими та точними. Однорядкові коментарі (`//`) підходять для пояснення конкретного рядка або невеликого фрагмента коду, розташовані безпосередньо поруч з цими елементами. Багаторядкові коментарі (`/* ... */`) варто використовувати для опису логіки, алгоритмів чи роботи великих блоків коду [1]. Це допомагає іншим розробникам зрозуміти загальну картину та конкретні деталі реалізації. Коментарі також застосовуються для позначок у процесі розробки, наприклад, "TODO", "FIXME" або "NOTE", щоб зазначити місця, які потребують доопрацювання або мають важливі примітки. Переконайтеся, що
9
коментарі завжди актуальні та оновлюються разом зі змінами в коді, щоб уникнути плутанини. Надмірна кількість коментарів може ускладнити читання коду, тому пишіть самодокументуючий код, використовуючи коментарі лише там, де це дійсно необхідно. Дотримання цих порад допоможе створити зрозумілий, організований та підтримуваний код, який буде зручний для роботи як для вас, так і для ваших колег.
Приклад поганого та гарного коду щодо рекомендацій 7
78 //Поганий приклад
79 //Це змінна для зберігання імені користувача
80 string userName = "John";
81
82 // Це умова перевірки
83 if (userName == "John")
84 {
85 // Вивести ім'я
86 Console.WriteLine("Hello, John!");
87 }
88
89 // Це цикл
90 for (int i = 0; i < 10; i++)
91 {
92 Console.WriteLine(i); // Вивести число
93 }
94
95 //Гарний приклад
96 // Ім'я користувача, яке використовується для привітання в системі
97 string userName = "John";
98
99 // Перевіряємо, чи користувач є адміністратором
100 if (userName == "Admin")
101 {
102 // Виводимо привітання для адміністратора
10
103 Console.WriteLine("Welcome back, Admin!");
104 }
105
106 // Генеруємо список чисел для відображення в інтерфейсі
107 for (int i = 0; i < 10; i++)
108 {
109 Console.WriteLine(i); // Показуємо номер елемента на екрані
110
8. Використовуйте функції як основні будівельні блоки
Функціональний підхід у програмуванні дозволяє зосередитися на логіці перетворення даних, а не на управлінні станом програми. Чисті функції, які не змінюють вхідні параметри та не мають побічних ефектів, забезпечують передбачуваність і полегшують налагодження. Наприклад, функції типу map, filter та fold дозволяють маніпулювати даними в колекціях зрозуміло та ефективно.
Використання чистих функцій також полегшує написання модульних тестів. Оскільки результат таких функцій залежить лише від вхідних даних, можна легко передбачити їхню поведінку для будь-якого набору тестових випадків. Окрім того, це сприяє повторному використанню коду, оскільки такі функції є самодостатніми.
9. Уникайте змінного стану
Робота зі змінним станом у програмуванні часто призводить до складних і важковідтворюваних помилок. Це особливо актуально для багатопотокових програм, де різні потоки можуть одночасно змінювати спільні змінні. Замість змінного стану краще використовувати немутуючі структури даних.
Перевагою такого підходу є передбачуваність. Якщо структура даних немутуюча, ви можете бути впевнені, що вона не зміниться після створення. Це полегшує відстеження логіки програми та знижує ризик помилок.
11
10. Використовуйте асинхронні методи (async, await)
Асинхронне програмування стало стандартом для роботи з операціями, які можуть тривати значний час, наприклад, зчитування даних із файлу чи запити до мережі. Методологія async і await дозволяє писати асинхронний код, що читається так само легко, як синхронний. У C# асинхронні методи забезпечують інструменти для ефективного управління обчислювальними ресурсами.
Правильне використання асинхронних конструкцій також покращує масштабованість додатків, оскільки дозволяє обробляти більшу кількість запитів одночасно. У сучасних мікросервісних архітектурах асинхронність є невід’ємною частиною, яка дозволяє забезпечити високу продуктивність і відмовостійкість.
Приклад поганого та гарного коду щодо рекомендацій 8-10
111 //Поганий приклад
112 public class Example
113 {
114 private List<int> numbers;
115
116 public Example()
117 {
118 numbers = new List<int>();
119 }
120
121 public void AddNumber(int number)
122 {
123 numbers.Add(number);
124 }
125
126 public int Sum()
127 {
128 int sum = 0;
12
129 foreach (var number in numbers)
130 {
131 sum += number;
132 }
133 return sum;
134 }
135
136 public async Task<int> GetDataAndCalculateSum()
137 {
138 var data = await FetchData();
139 foreach (var item in data)
140 {
141 AddNumber(item);
142 }
143 return Sum();
144 }
145
146 private Task<List<int>> FetchData()
147 {
148 return Task.FromResult(new List<int> { 1, 2, 3, 4, 5 });
149 }
150 }
151 //Гарний приклад
152 public class ExampleClass
153 {
154 public int Sum(IEnumerable<int> numbers)
155 {
156 return numbers.Aggregate(0, (acc, number) => acc + number);
157 }
158
159 public async Task<int> GetDataAndCalculateSum()
160 {
161 var data = await FetchData();
162 return Sum(data);
163 }
13
164
165 private Task<List<int>> FetchData()
166 {
167 return Task.FromResult(new List<int> { 1, 2, 3, 4, 5 });
168 }
169 }
11. Використовуйте try-catch блоки для захисту критичного коду
Критичний код, такий як операції з файлами, запити до баз даних або зовнішніх сервісів, може призвести до помилок через непередбачувані обставини, наприклад, відсутність файлу чи проблеми з мережею. Щоб забезпечити стабільність програми, слід огортати такий код у блоки try-catch. Це дозволяє перехоплювати виключення, обробляти їх і продовжувати виконання програми без аварійного завершення. У блоках catch важливо надавати інформативні повідомлення про помилки, які не лише сповіщають користувача про проблему, а й допомагають розробникам діагностувати її.
12. Логування помилок для відстежування та діагностики
Логування є невід’ємною частиною стабільного програмного забезпечення. Воно дозволяє документувати помилки та інші ключові події, які допомагають відновити хронологію виконання програми під час діагностики. Для ефективного логування слід зберігати такі дані, як текст помилки, час і дата її виникнення, стек викликів, а також контекст виконання.
Логування не лише допомагає аналізувати поточні проблеми, але й дає змогу виявляти повторювані збої, прогнозувати потенційні ризики та планувати їхнє усунення. Для централізованого зберігання логів доцільно використовувати системи моніторингу, які дозволяють отримувати доступ до звітів у реальному часі. Це особливо важливо для розподілених систем або хмарних додатків.
14
13. Використовуйте блоки finally для звільнення ресурсів
Під час роботи з ресурсами, такими як файли, бази даних або мережеві з’єднання, необхідно забезпечувати їхнє коректне звільнення після завершення операцій. Блоки finally дозволяють виконувати необхідні дії, такі як закриття файлів чи припинення транзакцій, незалежно від того, чи виникла помилка під час виконання основного коду. Це гарантує, що ресурси не залишаться зайнятими, що, у свою чергу, запобігає витокам пам’яті, збої в роботі програми та втраті продуктивності. Особливо важливо застосовувати цей підхід у довготривалих додатках або програмах, які працюють у багатокористувацькому середовищі, де витоки ресурсів можуть накопичуватись і призводити до серйозних проблем.
Приклад поганого та гарного коду щодо рекомендацій 11-13
174 //Поганий приклад
175 public class Example
176 {
177 public void ProcessFile(string filePath)
178 {
179 FileStream file = null;
180 file = new FileStream(filePath, FileMode.Open);
181 StreamReader reader = new StreamReader(file);
182 string content = reader.ReadToEnd();
183 Console.WriteLine(content);
184 }
185 }
186 //Гарний приклад
187 public class ExampleClass
188 {
189 private static readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();
190
191 public void ProcessFile(string filePath)
15
192 {
193 FileStream file = null;
194 try
195 {
196 Logger.Info($"Спроба відкрити файл: {filePath}");
197 file = new FileStream(filePath, FileMode.Open);
198 StreamReader reader = new StreamReader(file);
199 string content = reader.ReadToEnd();
200 Console.WriteLine(content);
201 Logger.Info($"Файл успішно прочитано: {filePath}");
202 }
203 catch (FileNotFoundException ex)
204 {
205 Logger.Error(ex, $"Файл не знайдено: {filePath}");
206 }
207 catch (UnauthorizedAccessException ex)
208 {
209 Logger.Error(ex, $"Недостатньо прав доступу до файлу: {filePath}");
210 }
211 catch (Exception ex)
212 {
213 Logger.Error(ex, $"Невідома помилка при обробці файлу: {filePath}");
214 }
215 finally
216 {
217 if (file != null)
218 {
219 file.Close();
220 Logger.Info($"Файл закрито: {filePath}");
221 }
222 }
223 }
224 }
16
Слайди з презентації, які ілюструють виконання даної практичної роботи наведено у додатку Б.
17
ВИСНОВКИ
У ході виконання практичного завдання було глибоко вивчено ключові принципи, рекомендації та найкращі практики написання чистого, продуктивного та оптимізованого коду мовою програмування C#. Особливу увагу приділено підходам, які сприяють створенню зрозумілого, підтримуваного та якісного коду, що відповідає принципам функціонального програмування. Ці підходи забезпечують легкість масштабування рішень, зберігаючи їх високу якість і читабельність.
18
СПИСОК ВИКОРИСТАННИХ ДЖЕРЕЛ
1. С# style guide - .NET. Microsoft Learn: Build skills that open doors in your career. URL: https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions (дата звернення: 12.12.2024)
19
ДОДАТОК А
Відео-посилання на YouTube
https://youtu.be/OcqJffFe2Uc
20
ДОДАТОК Б
Скріншоти презентації
Рисунок Б.1 – Титульний лист
Рисунок Б.2 – Правила форматування коду
21
Рисунок Б.3 – Порада щодо використання форматувальника коду
Рисунок Б.4 – Приклади поганого і гарного форматування коду
22
Рисунок Б.5 – Порада в написанні назв
Рисунок Б.6 – Правила найменування
23
Рисунок Б.7 – Приклад поганого та гарного найменування
Рисунок Б.8 – Порада щодо коментування коду
24
Рисунок Б.9 – Приклад поганого та гарного оформлення коментарів
Рисунок Б.10 – Правила дотримання функціональної парадигми
25
Рисунок Б.11 – Поганий та гарний приклад дотримання функціональної парадигми
Рисунок Б.12 – Правила обробки помилок
26
Рисунок Б.13 – Приклад поганої та гарної обробки помилок
Рисунок Б.14 – Висновок щодо наданих рекомендацій
27
Рисунок Б.15 – Список використаних джерел